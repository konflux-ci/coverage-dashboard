name: Generate Tekton Coverage Dashboard

on:
  push:
    branches:
      - main
  schedule:
    - cron: '0 3 * * *'  # Daily at 03:00 UTC
  workflow_dispatch:

jobs:
  generate-coverage:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout this repo (dashboard)
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Install tools
        run: |
          sudo apt-get update
          sudo apt-get install -y jq
          pip install yq

      - name: Prepare workspace
        run: mkdir workspace

      - name: Checkout gh-pages to access old coverage.json
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          path: gh-pages

      - name: Clone repos and calculate coverage
        run: |
          cd workspace
          echo "[" > ../_temp_coverage.json

          COUNT=$(yq '.repositories | length' ../repos.yaml)

          OLD_COVERAGE_JSON=$(cat ../gh-pages/coverage.json || echo "[]")

          for i in $(seq 0 $((COUNT - 1))); do
            REPO=$(yq ".repositories[$i].name" ../repos.yaml | tr -d '"')
            REPO_NAME=$(basename "$REPO")

            echo "→ Cloning $REPO..."
            git clone --depth 1 "https://github.com/$REPO.git"
            cd "$REPO_NAME"

            EXCLUDE_DIRS=$(yq ".repositories[$i].exclude_dirs // [] | join(\"|\")" ../../repos.yaml)
            EXCLUDE_FILES=$(yq ".repositories[$i].exclude_files // []" ../../repos.yaml)

            if [ -n "$EXCLUDE_DIRS" ]; then
              INCLUDED_PACKAGES=$(go list ./... | grep -vE "$EXCLUDE_DIRS" || true)
            else
              INCLUDED_PACKAGES=$(go list ./...)
            fi

            STATUS="ok"
            COVERAGE="0.0"

            if [ -n "$INCLUDED_PACKAGES" ] && go test -coverprofile=coverage_raw.out $INCLUDED_PACKAGES; then
              cp coverage_raw.out coverage.out

              FILE_COUNT=$(echo "$EXCLUDE_FILES" | yq 'length')
              for j in $(seq 0 $((FILE_COUNT - 1))); do
                FILE=$(echo "$EXCLUDE_FILES" | yq ".[$j]" | tr -d '"')
                echo "    Removing $FILE from coverage"
                sed -i "/$FILE/d" coverage.out || true
              done

              COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | tr -d '%')
              # Generate HTML report
              go tool cover -html=coverage.out -o coverage.html
              mkdir -p ../../gh-pages/coverage/$REPO
              cp coverage.html ../../gh-pages/coverage/$REPO/index.html
            else
              echo "    ❌ Coverage failed or no testable packages"
              STATUS="failed"

              OLD_ENTRY=$(echo "$OLD_COVERAGE_JSON" | jq -r --arg repo "$REPO" '.data[]? | select(.repo == $repo)')
              if [ -n "$OLD_ENTRY" ]; then
                COVERAGE=$(echo "$OLD_ENTRY" | jq -r '.coverage')
              else
                COVERAGE=null
              fi
            fi

            echo "    → $REPO coverage: $COVERAGE% (status: $STATUS)"
            echo "  {\"repo\": \"$REPO\", \"coverage\": $COVERAGE, \"status\": \"$STATUS\" }," >> ../../_temp_coverage.json

            cd ..
          done

          cd ..
          sed -i '$ s/,$//' _temp_coverage.json
          echo "]" >> _temp_coverage.json

      - name: Wrap coverage.json with run_url
        run: |
          RUN_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

          jq -n \
            --arg run_url "$RUN_URL" \
            --argjson data "$(cat _temp_coverage.json)" \
            '{run_url: $run_url, data: $data}' > coverage.json

      - name: Commit and push updated coverage.json
        run: |
          cp coverage.json gh-pages/coverage.json
          cd gh-pages
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add coverage.json coverage/
          if git diff --cached --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update coverage data on $(date --utc)"
            git push origin gh-pages
          fi
